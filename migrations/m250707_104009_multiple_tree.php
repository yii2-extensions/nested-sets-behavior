<?php

declare(strict_types=1);

use yii\db\Migration;

class m250707_104009_multiple_tree extends Migration
{
    public function safeUp()
    {
        $primaryKey = $this->db->driverName === 'oci'
            ? 'NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY'
            : $this->primaryKey();

        $nameColumn = $this->db->driverName === 'oci'
            ? $this->string(4000)->notNull()
            : $this->text()->notNull();

        $this->createTable('{{%multiple_tree}}', [
            'id' => $primaryKey,
            'tree' => $this->integer()->null(),
            'name' => $nameColumn,
            'lft' => $this->integer()->notNull(),
            'rgt' => $this->integer()->notNull(),
            'depth' => $this->integer()->notNull(),
        ]);

        $this->createIndex('idx_multiple_tree_tree', '{{%multiple_tree}}', 'tree');
        $this->createIndex('idx_multiple_tree_lft', '{{%multiple_tree}}', 'lft');
        $this->createIndex('idx_multiple_tree_rgt', '{{%multiple_tree}}', 'rgt');
        $this->createIndex('idx_multiple_tree_depth', '{{%multiple_tree}}', 'depth');
        $this->createIndex('idx_multiple_tree_tree_lft_rgt', '{{%multiple_tree}}', ['tree', 'lft', 'rgt']);

        if ($this->db->driverName !== 'sqlite') {
            $this->addCommentOnTable('{{%multiple_tree}}', 'Multiple nested sets tree structure for hierarchical data');
            $this->addCommentOnColumn('{{%multiple_tree}}', 'tree', 'Tree identifier for multiple trees support');
            $this->addCommentOnColumn('{{%multiple_tree}}', 'lft', 'Left boundary of nested set');
            $this->addCommentOnColumn('{{%multiple_tree}}', 'rgt', 'Right boundary of nested set');
            $this->addCommentOnColumn('{{%multiple_tree}}', 'depth', 'Node depth in the tree hierarchy');
        }
    }

    public function safeDown()
    {
        $this->dropTable('{{%multiple_tree}}');
    }
}
