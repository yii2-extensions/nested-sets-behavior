<?php

use yii\db\Migration;

class m250707_103609_tree extends Migration
{
    public function safeUp()
    {
        $primaryKey = $this->db->driverName === 'oci'
            ? 'NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY'
            : $this->primaryKey();

        $nameColumn = $this->db->driverName === 'oci'
            ? $this->string(4000)->notNull()
            : $this->text()->notNull();

        $this->createTable('{{%tree}}', [
            'id' => $primaryKey,
            'name' => $nameColumn,
            'lft' => $this->integer()->notNull(),
            'rgt' => $this->integer()->notNull(),
            'depth' => $this->integer()->notNull(),
        ]);

        $this->createIndex('idx_tree_lft', '{{%tree}}', 'lft');
        $this->createIndex('idx_tree_rgt', '{{%tree}}', 'rgt');
        $this->createIndex('idx_tree_depth', '{{%tree}}', 'depth');
        $this->createIndex('idx_tree_lft_rgt', '{{%tree}}', ['lft', 'rgt']);

        if ($this->db->driverName !== 'sqlite') {
            $this->addCommentOnTable('{{%tree}}', 'Nested sets tree structure for hierarchical data');
            $this->addCommentOnColumn('{{%tree}}', 'id', 'Primary key of the tree node');
            $this->addCommentOnColumn('{{%tree}}', 'name', 'Name of the tree node');
            $this->addCommentOnColumn('{{%tree}}', 'lft', 'Left boundary of nested set');
            $this->addCommentOnColumn('{{%tree}}', 'rgt', 'Right boundary of nested set');
            $this->addCommentOnColumn('{{%tree}}', 'depth', 'Node depth in the tree hierarchy');
        }
    }

    public function safeDown()
    {
        $this->dropTable('{{%tree}}');
    }

}
