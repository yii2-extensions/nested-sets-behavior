<?php

declare(strict_types=1);

use yii\db\Migration;

class m250707_103609_tree extends Migration
{
    public function safeUp()
    {
        $rawPrimaryKey = 'NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY';

        if ($this->db->driverName === 'mysql') {
            $tableOptions = 'ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci';
        }

        $this->createTable(
            '{{%tree}}',
            [
                'id' => $this->db->driverName !== 'oci' ? $this->primaryKey()->notNull() : $rawPrimaryKey,
                'name' => $this->string(255)->notNull(),
                'lft' => $this->integer()->notNull(),
                'rgt' => $this->integer()->notNull(),
                'depth' => $this->integer()->notNull(),
            ],
            $tableOptions ?? null,
        );

        $this->createIndex('idx_tree_lft', '{{%tree}}', 'lft');
        $this->createIndex('idx_tree_rgt', '{{%tree}}', 'rgt');
        $this->createIndex('idx_tree_depth', '{{%tree}}', 'depth');
        $this->createIndex('idx_tree_lft_rgt', '{{%tree}}', ['lft', 'rgt']);

        if ($this->db->driverName !== 'sqlite') {
            $this->addCommentOnTable('{{%tree}}', 'Nested sets tree structure for hierarchical data');
            $this->addCommentOnColumn('{{%tree}}', 'id', 'Primary key of the tree node');
            $this->addCommentOnColumn('{{%tree}}', 'name', 'Name of the tree node');
            $this->addCommentOnColumn('{{%tree}}', 'lft', 'Left boundary of nested set');
            $this->addCommentOnColumn('{{%tree}}', 'rgt', 'Right boundary of nested set');
            $this->addCommentOnColumn('{{%tree}}', 'depth', 'Node depth in the tree hierarchy');
        }
    }

    public function safeDown()
    {
        $this->dropTable('{{%tree}}');
    }
}
